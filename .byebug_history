c
@user
c
self.id
self.class.name
@current_user
current_user
self.list
self.class
self.list_items
self
list
instance_options[:_instance]
object
c
@current_user.id
c
@current_user.id
c
@current_user.id
@current_user
c
current_user
@user
@user.id
@user.lists.inspect
@user.lists
@user
c
current_user
c
current_user
c
current_user
params
current_user
@user
c
@user 
current_user
c
render json: { token: token, user: user, include: 'lists' }
user
@user
user.lists
user
c
@current_user
c
User.find_by(email: user_email)
User.all
user_email
@current_user
c
paramsUser.find_by(uid: firebase_id_token)
params
params[:email]
User.find_by(uid: firebase_id_token)
firebase_id_token
payload['sub']
payload
c
user
c
User.find_by(id:14).uid
User.find_by(id:14)
User(14)
User.all
user
c
firebase_id_token
params[:firebase_id_token]
params
payload
c
@current_user.id
@current_user
c
token
c
user_id
uid
payload
auth
user_email
auth.header
c
User.find_by(uid: user_id)
token
@current_user
c
decoded_token = FirebaseIdToken.new(token).decode
request.headers['Authorization']
User.all
request.headers['Authorization']
request
auth_header
c
user_params
c
user_params[:uid]
user_params
c
user_params[:uid]
user_params[:uid}
user_params
FirebaseIdToken.new(token).decode
user_params
@user
c
user_params
@user
c
user_params
c
user_params[:uid]
decoded_token.first['user_id']
FirebaseIdToken.new(token).decode
request.headers['Authorization']
user_params
continue
request.headers['Authorization']
current_user
@user
headers
user_params
@user
c
@user
c
@user
c
@user
c
@user
c
token
c
token
c
auth_header
c
request.headers['Authorization']
request.headers['Authotization']
request.headers
c
request
c
request
header
c
response.header
response
c
request.headers
request
request.headers
request
token
c
token
tokenn
c
token
c
token
c
token
c
token
c
payload
